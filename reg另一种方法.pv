let system(appid:Appid,aaid:AAID,skAT:sskey,uname:Uname,password:bitstring,facetid:Facetid,callerid:Callerid,token:bitstring,wrapkey:key)=
(
	(*one user one RP registration once*)
	(* some fields initial public *)
	new https:channel; new CU:channel; new MC:channel; new AM:channel;
	let pkAT = spk(skAT) in
	new fakefacetid:Facetid; new fakecallerid:Callerid;
	out(c,(uname,appid,facetid,callerid,fakefacetid,fakecallerid,aaid,pkAT));
	insert AppList(appid,facetid);	
	
	
	let atype = autr_1b in 
	(*let scene = software in *)
	
	
	
			
	
	
	(*                                                 some fields may leaked                                  *)
	(*out(c,skAT);*)
	(*out(c,token);*)
	(*out(c,wrapkey);*)
	
	(*                                           malicious entities situations                                *)
	(*RegUC(c, MC, fakefacetid)|*)
	(*RegUA(https, c, uname,appid,password)|*)
	(*RegUC(CU, c, facetid)|*)
	(*RegASM(c, AM, token, fakecallerid, atype)|*)
	(*RegASM(MC, c, token, callerid, atype)|*)
	(*RegAutr(c, aaid, skAT, wrapkey, atype)|*)

	(* honest entities *)
	RegRP(https, uname, appid, password)|
	RegRP(c, uname, appid, password)|
	RegUA(https, CU,uname,appid, password)|
	(*RegUA(c,CU,uname,facetappid,password2)*)
	RegUC(CU, MC, facetid)|
	RegASM(MC, AM, token, callerid, atype)|
	RegAutr(AM, aaid, skAT, wrapkey, atype)
).

table User_side(Uname,bitstring,AAID,Callerid,Facetid,bitstring,key,sskey).
table RP_side(Appid).

let insert_fields() =
(
		!(
			new aaid:AAID;
			new facetid:Facetid; 
			new callerid:Callerid; 
			new skAT:sskey; 
			new wrapkey:key;
			new token:bitstring;
			new uname:Uname; new password:bitstring;
			insert User_side(uname,password,aaid,callerid,facetid,token,wrapkey,skAT)
		)|	
		!(
			new appid:Appid;
			insert RP_side(appid)
		)
).


process
( 
	insert_fields()|
	!(
		get User_side(uname,password,aaid,callerid,facetid,token,wrapkey,skAT) in
		get RP_side(appid) in
		system(appid,aaid,skAT,uname,password,facetid,callerid,token,wrapkey)
	)
)
