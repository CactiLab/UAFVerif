let system(appid:Appid,aaid:AAID,skAU:sskey,keyid:KeyID,wrapkey:key,token:bitstring,uname:Uname,facetid:Facetid,callerid:Callerid,cntr:CNTR) =
((* one RP authenticate one user many times *)

	let kh = get_kh(atype,uname,appid,callerid,token,keyid,wrapkey,skAU) in
	let kid = get_kid(atype,kh,keyid) in
	let testkid = kid in
	insert ASMDB(appid,kid,kh);
	insert AutrDB(appid,kid,kh);
	
	(*choose the type you want to verify*)
	(*let atype = autr_1b in*)
	(*let ltype = empty in *)

	out(c,(uname,appid,facetid,aaid,callerid,pkAU)); (* public info *)
	!( 
		new https:channel; new CU:channel; new MC:channel; new AM:channel;
		new fakecallerid:Callerid; new fakefacetid:Facetid;
		new tr:Tr;
		
		
		
		
		(*out(c,wrapkey);*)
		(*out(c,skAU);*)
		(*out(c,cntr);*)
		(*out(c,token);*)
		
		(* malicious entities situations*)
		(*AuthUA(c, CU, uname, ltype)|*)
		(*AuthUA(https, c, uname, ltype)|*)
		(*AuthUC(c, MC, fakefacetid, ltype)|*)
		(*AuthUC(CU, c, facetid, ltype)|*)
		(*AuthASM(c,AM,token,fakecallerid,atype,ltype)|*)
		(*AuthASM(MC,c,token,callerid,atype,ltype)|*)
		(*AuthAutr(c,aaid,wrapkey,cntr,atype,ltype)|*)
		(* honest entities *)
		AuthRP(https, uname, appid, aaid,kid,pkAU,cntr,tr,ltype)|
		AuthUA(https, CU,uname, ltype)|
		AuthUC(CU, MC, facetid, ltype)|		
		AuthASM(MC,AM,token,callerid,atype,ltype)|		
		AuthAutr(AM,aaid,wrapkey,cntr,tr,atype,ltype)	
)
process
(
	
	
	new appid:Appid;
	new aaid:AAID;
	new skAU:sskey; let pkAU = spk(skAU) in let testskAU = skAU in
	new keyid:KeyID;
	new wrapkey:key;	
	new token:bitstring;	
	new uname:Uname;
	new facetid:Facetid; new fakefacetid:Facetid; insert AuthAppList(appid,facetid);
	new callerid:Callerid; new fakecallerid:Callerid; insert TrustCallerid(callerid);
	)
	
	
	system(appid,aaid,skAU,keyid,wrapkey,token,uname,facetid,callerid,cntr) |
)