query secret testak.
let system(appid:Appid,aaid:AAID,skAU:sskey,keyid:KeyID,wrapkey:key,token:bitstring,uname:Uname,facetid:Facetid,callerid:Callerid,cntr:CNTR) =
((* one RP authenticate one user many times *)
	(*choose the type you want to verify*)
	(*let atype = autr_1b in*)
	(*let ltype = empty in *)


let atype = autr_2b in
 let ltype = stepup in	
	
	let pkAU = spk(skAU) in let testskAU = skAU in
	let kh = get_kh(atype,uname,appid,callerid,token,keyid,wrapkey,skAU) in
	let kid = get_kid(atype,kh,keyid) in let testkid = kid in	
	insert ASMDB(appid,kid,kh);
	insert AutrDB(appid,kid,kh);
	
	

	out(c,(uname,appid,facetid,aaid,callerid,pkAU)); (* public info *)
	( 
		new https:channel; new CU:channel; new MC:channel; new AM:channel;
		new fakecallerid:Callerid; new fakefacetid:Facetid;
		new tr:Tr;   let testtr = tr in
		 
		
(* no fields being compromised *)AuthUC(c, MC, fakefacetid, ltype)| (*malicious-UA*)
AuthUA(https, c, uname, ltype)| AuthASM(c,AM,token,fakecallerid,atype,ltype)| (*malicious-UC*)
AuthUC(CU, c, facetid, ltype)| AuthAutr(c,aaid,wrapkey,cntr,tr,atype,ltype)| (*malicious-ASM*)
		
		
		(*out(c,wrapkey);*)
		(*out(c,skAU);*)
		(*out(c,cntr);*)
		(*out(c,token);*)
		
		(* malicious entities situations*)
		(*AuthUA(c, CU, uname, ltype)|*)
		(*AuthUA(https, c, uname, ltype)|*)
		(*AuthUC(c, MC, fakefacetid, ltype)|*)
		(*AuthUC(CU, c, facetid, ltype)|*)
		(*AuthASM(c,AM,token,fakecallerid,atype,ltype)|*)
		(*AuthASM(MC,c,token,callerid,atype,ltype)|*)
		(*AuthAutr(c,aaid,wrapkey,cntr,atype,ltype)|*)
		(* honest entities *)
		AuthRP(https, uname, appid, aaid,kid,pkAU,cntr,tr,ltype)|
		AuthUA(https, CU,uname, ltype)|
		AuthUC(CU, MC, facetid, ltype)|		
		AuthASM(MC,AM,token,callerid,atype,ltype)|		
		AuthAutr(AM,aaid,wrapkey,cntr,tr,atype,ltype)	
	)
).

process
(
	new appid:Appid;
	new aaid:AAID;
	new skAU:sskey; 
	new keyid:KeyID;
	new wrapkey:key;	
	new token:bitstring;	
	new uname:Uname;
	new cntr:CNTR;
	new facetid:Facetid; insert AuthAppList(appid,facetid);
	new callerid:Callerid; insert TrustCallerid(callerid);
	system(appid,aaid,skAU,keyid,wrapkey,token,uname,facetid,callerid,cntr)|
	(
		new skAU2:sskey;
		new keyid2:KeyID;
		new wrapkey2:key;
		new token2:bitstring;
		new uname2:Uname;
		new cntr2:CNTR;
		system(appid,aaid,skAU2,keyid2,wrapkey2,token2,uname2,facetid,callerid,cntr2)
	)|
	(
		new appid2:Appid;
		new skAU3:sskey;
		new keyid3:KeyID;
		new uname3:Uname;
		new cntr3:CNTR;
		system(appid2,aaid,skAU3,keyid3,wrapkey,token,uname3,facetid,callerid,cntr3)
	)
)b'k_93,testak_92,testak_91,testak_90,testak_89,testak_88,testak_87,testak_86,testak_85,testak_84,testak_83,testak_82,testak_81,testak_80,testak_79,testak_78,testak_77,testak_76,testak_75,testak_74,testak_73,testak_72,testak_71,testak_70,testak_69,testak_68,testak_67,testak_66,testak_65,testak_64,testak_63,testak_62,testak_61,testak_60,testak_59,testak_58,testak_57,testak_56,testak_55,testak_54,testak_53,testak_52,testak_51,testak_50,testak_49,testak_48,testak_47,testak_46,testak_45,testak_44,testak_43,testak_42,testak_41,testak_40,testak_39,testak_38,testak_37,testak_36,testak_35,testak_34,testak_33,testak_32,testak_31,testak_30,testak_29,testak_28,testak_27,testak_26,testak_25,testak_24,testak_23,testak_22,testak_21,testak_20,testak_19,testak_18,testak_17,testak_16,testak_15,testak_14,testak_13,testak_12,testak_11,testak_10,testak_9,testak_8,testak_7,testak_6,testak_5,testak_4,testak_3,testak_2,testak_1,testak is true.\r\n\r\n--------------------------------------------------------------\r\n'