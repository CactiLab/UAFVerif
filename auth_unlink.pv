let system(appid:Appid,aaid:AAID,skAU:sskey,keyid:KeyID,wrapkey:key,token:bitstring,uname:Uname,facetid:Facetid,callerid:Callerid) =
(
	(*choose the type you want to verify*)
	
	
	
	let atype = autr_1b in
	let ltype = empty in 

	let pkAU = spk(skAU) in
	new fakefacetid:Facetid;
	new fakecallerid:Callerid;
	
	let kh = get_kh(atype,uname,appid,callerid,token,keyid,wrapkey,skAU) in
	let kid = get_kid(atype,kh,keyid) in
	insert AuthAppList(appid,facetid);
	insert ASMDB(appid,kid,kh);
	insert AutrDB(appid,kid,kh);
	out(c,(uname,appid,facetid,aaid,callerid,pkAU)); (* public info *)
	
	!( (* many times authentication for one user *)
		new https:channel; new CU:channel; new MC:channel; new AM:channel; out(c,https);
		new tr:Tr;
		new cntr:CNTR;
		
		
		
		
		
		(*out(c,wrapkey);*)
		(*out(c,skAU);*)
		(*out(c,cntr);*)
		(*out(c,token);*)
		
		(* malicious entities situations*)
		(*AuthUA(https, c, uname, ltype)|*)
		(*AuthUC(c, MC, fakefacetid, ltype)|*)
		(*AuthUC(CU, c, facetid, ltype)|*)
		(*AuthASM(c,AM,token,fakecallerid,atype,ltype)|*)
		(*AuthASM(MC,c,token,callerid,atype,ltype)|*)
		(*AuthAutr(c,aaid,wrapkey,cntr,atype,ltype)|*)
		(* honest entities *)
		AuthRP(https, uname, appid, aaid,kid,pkAU,cntr,tr,ltype)|
		AuthRP(c,uname, appid, aaid,kid,pkAU,cntr,tr,ltype)|
		AuthUA(https, CU,uname, ltype)|
		AuthUC(CU, MC, facetid, ltype)|		
		AuthASM(MC,AM,token,callerid,atype,ltype)|		
		AuthAutr(AM,aaid,wrapkey,cntr,atype,ltype)	
	)
).
process
(
	new appid:Appid;new appid2:Appid;
	new aaid:AAID;new aaid2:AAID;
	new skAU:sskey; new skAU2:sskey; 
	new keyid:KeyID;new keyid2:KeyID;
	new wrapkey:key;	new wrapkey2:key;	
	new token:bitstring;	new token2:bitstring;	
	new uname:Uname;new uname2:Uname;
	new facetid:Facetid; new facetid2:Facetid;
	new callerid:Callerid; new callerid2:Callerid; out(c,facetid2);
	system(appid,aaid,skAU,keyid,wrapkey,token,uname,facetid,callerid) |
	system(appid2,aaid,skAU2,keyid2,choice[wrapkey,wrapkey2],choice[token,token2],uname,facetid,callerid) 
)