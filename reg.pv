let system(appid:Appid,aaid:AAID,skAT:sskey,uname:Uname,password:bitstring,facetid:Facetid,callerid:Callerid,personaid:PersonaID,token:bitstring,wrapkey:key)=
(
	(* write "let atype = autr_1b in" down to set the type you want to verify *)
	(* "autr_1b" for 1B,  "autr_1r" for 1R, "autr_2b" for 2B, "autr_2r" for 2R *)
	(* write "let ftype = hasset in" down to set RP provides appid, "let ftype = null" to set RP provides no appid *)
	new SR:channel; new https:channel; new CU:channel; new MC:channel; new AM:channel;
	let pkAT = spk(skAT) in
	new fakefacetid:Facetid; new fakecallerid:Callerid; new fakepersonaid:PersonaID;
	(* the attacker has access to following fields *)
	out(c,(uname,appid,facetid,callerid,fakefacetid,fakecallerid,fakepersonaid,aaid,pkAT));
	insert AppList(appid,facetid);	
			(* following fields may leaked *)
			(*out(c,token);*)
			(*out(c,wrapkey);*)
			(*out(c,skAT);*)
			(* there may exists following malicious entities *)
            (*RegUS(c, appid, ftype)|*)
            (*RegRP(c, https, uname, password)|*)
			(*RegUA(https, c, uname,appid,password,ftype)|*)
			(*RegUC(c, MC, fakefacetid, ftype)|*)
			(*RegUC(CU, c, facetid, ftype)|*)
			(*RegUC(c, c, fakefacetid, ftype)|*)
			(*RegASM(c, AM, token, fakecallerid, fakepersonaid, atype)|*)
			(*RegASM(MC, c, token, callerid, personaid, atype)|*)
			(*RegASM(c, c, token, fakecallerid, fakepersonaid, atype)|*)
			(*RegASM(c, c, token, fakecallerid, fakepersonaid, atype)|*)
	(* following is honest entities *)
    RegUS(SR, appid, ftype)|
	RegRP(SR, https, uname, password)|
	RegRP(SR, c, uname, password)|
	RegUA(https, CU,uname, password,ftype)|
	(*RegUA(c,CU,uname,password2,ftype)*)
	RegUC(CU, MC, facetid, ftype)|
	RegASM(MC, AM, token, callerid, personaid,atype)|
	RegAutr(AM, aaid, skAT, wrapkey, atype)
).

process
( 
	(  
		new appid:Appid;
		new aaid:AAID;
		new facetid:Facetid; 
		new callerid:Callerid; 
		new personaid:PersonaID;
		new skAT:sskey; 
		new wrapkey:key;
		new token:bitstring;
		new uname:Uname; new password:bitstring;
		(* User 1 registers in RP 1 *)
		!system(appid,aaid,skAT,uname,password,facetid,callerid,personaid,token,wrapkey)|
		(* User 2 registers in RP 1*)
		!(
			new uname2:Uname;
			new password2:bitstring;
			new token2:bitstring;
			new wrapkey2:key;
			system(appid,aaid,skAT,uname2,password2,facetid,callerid,personaid,token2,wrapkey2)
		)|
		(* User 1 registers in RP 2, we assume the same user will not use same UName and pwd in different RPs*)
		!(
			new appid2:Appid;
			new uname3:Uname;
			new password3:bitstring;
			system(appid2,aaid,skAT,uname3,password3,facetid,callerid,personaid,token,wrapkey)
		)
	)
)
