let system(appid:Appid,aaid:AAID,skAT:sskey,uname:Uname,password:bitstring,facetid:Facetid,callerid:Callerid,token:bitstring,wrapkey:key)=
!( (* many RPs ger registration requests *)
	(*choose the type you want to verify*)
	let atype = autr_1b in 	
	(*let scene = software in *)

	!( (* many user register their accounts *)
		new skAT:sskey; let pkAT = spk(skAT) in
		!( (* a user register many times *)
			new https:channel; new CU:channel; new MC:channel; new AM:channel;
			insert AppList(appid,facetid);			
			out(c,(uname,appid,facetid,callerid,aaid,pkAT));
			
		
			(* honest entities *)
			RegRP(c, uname, appid, password)|
			RegUA(c, CU,uname,appid, password)|
			(*RegUA(c,CU,uname,facetappid,password2)*)
			RegUC(CU, MC, facetid)|
			RegASM(MC, AM, token, callerid, atype)|
			RegAutr(AM, aaid, skAT, wrapkey, atype)
		)	
	)
).


process
(
	new appid:Appid; new appid2:Appid; 
	new aaid:AAID; new aaid2:AAID;
	new skAT:sskey; new skAT2:sskey;
	new uname:Uname; new uname2:Uname; 
	new password:bitstring; new password2:bitstring;
	new facetid:Facetid;  new facetid2:Facetid; 
	new callerid:Callerid; new callerid2:Callerid; 
	new token:bitstring; new token2:bitstring; 
	new wrapkey:key; new wrapkey2:key;
	system(appid,aaid,skAT,uname,password,facetid,callerid,token,wrapkey)|
	system(appid2,aaid,skAT2,uname,password2,facetid,callerid,choice[token,token2],choice[wrapkey,wrapkey2])
)
