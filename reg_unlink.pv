let system(appid:Appid,aaid:AAID,skAT:sskey,uname:Uname,password:bitstring,facetid:Facetid,callerid:Callerid,token:bitstring,wrapkey:key)=
(
	(* write "let atype = autr_1b in" down to set the type you want to verify *)
	(* "autr_1b" for 1B,  "autr_1r" for 1R, "autr_2b" for 2B, "autr_2r" for 2R *)
	let atype = autr_1b in  
	(*one user one RP registration once*)
	(* some fields initial public *)
	new https:channel; new CU:channel; new MC:channel; new AM:channel;
	let pkAT = spk(skAT) in
	new fakefacetid:Facetid; new fakecallerid:Callerid;
	out(c,(uname,appid,facetid,callerid,fakefacetid,fakecallerid,aaid,skAT));
	insert AppList(appid,facetid);	
	
			(* some fields may leaked  *)
			(*out(c,skAT);*)
			(*out(c,token);*)
			(*out(c,wrapkey);*)
			(* malicious entities situations *)
			(*RegUC(c, MC, fakefacetid)|*)
			(*RegUA(https, c, uname,appid,password)|*)
			(*RegUC(CU, c, facetid)|*)
			(*RegASM(c, AM, token, fakecallerid, atype)|*)
			(*RegASM(MC, c, token, callerid, atype)|*)
			(*RegAutr(c, aaid, skAT, wrapkey, atype)|*)
	(* honest entities *)
	RegRP(https, uname, appid, password)|
	RegRP(c, uname, appid, password)|
	RegUA(https, CU,uname,appid, password)|
	(*RegUA(c,CU,uname,facetappid,password2)*)
	RegUC(CU, MC, facetid)|
	RegASM(MC, AM, token, callerid, atype)|
	RegAutr(AM, aaid, skAT, wrapkey, atype)
).

process
( 
	(         (* a RP  *)
		new appid:Appid;
		new aaid:AAID;
		new facetid:Facetid; 
		new callerid:Callerid; 
		new skAT:sskey; 
		new wrapkey:key;
		new token:bitstring;
		new uname:Uname; new password:bitstring;
		!system(appid,aaid,skAT,uname,password,facetid,callerid,token,wrapkey)|
		!(
			new appid2:Appid;
			new uname2:Uname;
			new password2:bitstring;
			new token2:bitstring;
			new wrapkey2:key;
			system(appid2,aaid,skAT,uname2,password2,facetid,callerid,choice[token,token2],choice[wrapkey,wrapkey2])
		)
	)
)