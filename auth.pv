let system(appid:Appid,aaid:AAID,skAU:sskey,keyid:KeyID,wrapkey:key,token:bitstring,uname:Uname,facetid:Facetid,callerid:Callerid,personaid:PersonaID,cntr:CNTR) =
((* one RP authenticate one user many times *)
	(* write "let atype = autr_1b in" down to set the type you want to verify *)
	(* "autr_1b" for 1B,  "autr_1r" for 1R, "autr_2b" for 2B, "autr_2r" for 2R *)
	(* write "let ltype = empty in" down to set the phase you want to verify *)
	(* "empty" for first login, "stepup" for step-up authentication *)
	(* do not use the combination of autr_2b/autr_2r and empty *)
   (* write "let ftype = hasset in" down to set RP provides appid, "let ftype = null" to set RP provides no appid *)
	let pkAU = spk(skAU) in let testskAU = skAU in
	let kh = get_kh(atype,uname,appid,callerid,personaid,token,keyid,wrapkey,skAU) in
	let kid = get_kid(atype,kh,keyid) in let testkid = kid in	
	insert ASMDB(appid,kid,kh);
	insert AutrDB(appid,kid,kh);
	out(c,(uname,appid,facetid,aaid,callerid,personaid,pkAU)); (* public info *)
	( 
		new SR:channel; new https:channel; new CU:channel; new MC:channel; new AM:channel;
		new fakecallerid:Callerid; new fakefacetid:Facetid; new fakepersonaid:PersonaID;
		new tr:Tr;   let testtr = tr in
				(* following fields may leaked *)
				(*out(c,token);*)
				(*out(c,wrapkey);*)
				(*out(c,skAU);*)
				(*out(c,cntr);*)
				(*out(c,kid);*)
				(* there may exists following malicious entities *)
                (*AuthUS(c, uname, appid, aaid,kid,pkAU,cntr,tr,ltype,ftype)|*)
                (*AuthRP(c, https)|*)
				(*AuthUA(https, c, uname, ltype,ftype)|*)
				(*AuthUC(c, MC, fakefacetid, ltype,ftype)|*)
				(*AuthUC(CU, c, facetid, ltype,ftype)|*)
				(*AuthUC(c, c, fakefacetid, ltype,ftype)|*)
				(*AuthASM(c,AM,token,fakecallerid,fakepersonaid,atype,ltype)|*)
				(*AuthASM(MC,c,token,callerid,personaid,atype,ltype)|*)
				(*AuthASM(c,c,token,fakecallerid,fakepersonaid,atype,ltype)|*)
				(*AuthAutr(c,aaid,wrapkey,cntr,tr,atype,ltype)|*)
		(* honest entities *)
        AuthUS(SR, uname, appid, aaid,kid,pkAU,cntr,tr,ltype,ftype)|
		AuthRP(SR, https)|
        AuthRP(SR, c)|
		AuthUA(https, CU,uname, ltype,ftype)|
		AuthUC(CU, MC, facetid, ltype,ftype)|		
		AuthASM(MC,AM,token,callerid,personaid,atype,ltype)|		
		AuthAutr(AM,aaid,wrapkey,cntr,tr,atype,ltype)	
	)
).

process
(
	new appid:Appid;
	new aaid:AAID;
	new skAU:sskey; 
	new keyid:KeyID;
	new wrapkey:key;	
	new token:bitstring;	
	new uname:Uname;
	new cntr:CNTR;
	new facetid:Facetid; insert AuthAppList(appid,facetid);
	new callerid:Callerid; insert TrustCallerid(callerid);
	new personaid:PersonaID;
	(* User 1 authenticates in RP 1 *)
	!system(appid,aaid,skAU,keyid,wrapkey,token,uname,facetid,callerid,personaid,cntr)|
	(* User 2 authenticates in RP 1 *)
	!(
		new skAU2:sskey;
		new keyid2:KeyID;
		new wrapkey2:key;
		new token2:bitstring;
		new uname2:Uname;
		new cntr2:CNTR;
		system(appid,aaid,skAU2,keyid2,wrapkey2,token2,uname2,facetid,callerid,personaid,cntr2)
	)|
	(* User 1 authenticates in RP 2 *)
	!(
		new appid2:Appid;
		new skAU3:sskey;
		new keyid3:KeyID;
		new uname3:Uname;
		new cntr3:CNTR;
		system(appid2,aaid,skAU3,keyid3,wrapkey,token,uname3,facetid,callerid,personaid,cntr3)
	)
)