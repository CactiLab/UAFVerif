(**********************************)

set ignoreTypes = false.
set reconstructTrace = false.
set traceDisplay = none.
set verboseClauses = none.
set explainDerivation = true.
set reconstructDerivation = false.
set displayDerivation = false.
set abbreviateClauses = true.
set verboseEq = false.
set verboseTerm = false.(**)
(********************************************************************)
(*                           Messages Type declaration                                        	    *)
(********************************************************************)
type msg.
type Uname.
type Appid.
type Facetid.
type Callerid.
type PersonaID.
type SData.
type Chlg.
type Fchlg.
type Tr.
type Token.
type AAID.
type CNTR.
type Nonce.
type KeyID.

(********************************************************************)
(*                                  Symmetric encryption     		                         	        *)
(********************************************************************)
type key.
type Senc_alg.
const WeakSenc:Senc_alg[private].

fun senc(bitstring,key):KeyID.
reduc forall m: bitstring, k:key; sdec(senc(m,k),k) = m.

fun senc_msg(msg,key):msg.
reduc forall m: msg, k:key; sdec_msg(senc_msg(m,k),k) = m.

(********************************************************************)
(*                                      Signature function                                                *)
(********************************************************************)
type spkey.
type sskey.

fun spk(sskey):spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m: bitstring, ssk: sskey; checksign(sign(m,ssk),spk(ssk)) = m.
reduc forall m: bitstring, ssk: sskey; getmess(sign(m,ssk)) = m.


(********************************************************************)
(*                                           Hash Functions.   					                        *)
(********************************************************************)

fun hash(bitstring): bitstring.
fun hash_a(Appid):bitstring.
fun hash_tr(Tr): Tr.

(********************************************************************)
(*              Final Challenge Params function to compute a FCP params               *)
(********************************************************************)

fun FCParams(Appid,Facetid,Chlg,bitstring):bitstring[data].

(********************************************************************)
(*                                     Get TLSDATA from channel               	                *)
(********************************************************************)

fun GetTLSdata(channel):bitstring.
  
(********************************************************************)
(*                         Increasing counter value                                                    *)
(********************************************************************)

fun Incr(CNTR):CNTR.
reduc forall cntr:CNTR; ReIncr(Incr(cntr)) = cntr.

(********************************************************************)
(*                 Get KHAccess token from a random ASMtoken                           *)
(********************************************************************)

fun To_12b_token(Appid,bitstring,Callerid,PersonaID):Token.
fun To_12r_token(Appid):Token.
fun f1(Token,Appid):Token.

(********************************************************************)
(*  Get final challenge hash from the random hash value of the final challenge *)
(********************************************************************)

fun ToFc(bitstring):Fchlg[typeConverter].

(********************************************************************)
(*                                            facetid related                                                *)
(********************************************************************)
fun facetid_to_appid(Facetid):Appid[typeConverter].
fun find_facetid(Appid):Facetid.


(********************************************************************)
(*                                            gen_function                                               *)
(********************************************************************)
fun gen_skAU(sskey,bitstring):sskey.
fun gen_cntr(CNTR,bitstring):CNTR.
fun gen_kid(KeyID,bitstring):KeyID.
(********************************************************************)
(*                                  table for database                                                    *)
(********************************************************************)


(********************************************************************)
(*                                   channel declarations                                               *)
(********************************************************************)
free c:channel.
free SR:channel[private].
free https:channel[private].
free CU:channel[private].
free MC:channel[private].
free AM:channel[private].
(********************************************************************)
(*                                   const declarations                                                   *)
(********************************************************************)

const debug:bitstring[private].
const reg_cntr:CNTR[private].
const auth_cntr:CNTR[private].

(********************************************************************)
(*                                               Event                                                          *)
(********************************************************************)
event RP_success_reg(Uname,Appid,AAID,KeyID).
event UA_init_reg(Uname).
event Autr_verify_reg(Uname,Appid,AAID,KeyID).

event malicious_RP_to_US().
event malicious_US_to_RP().
event malicious_RP_to_UA().
event malicious_UC_to_UA().
event malicious_UA_to_RP().
event malicious_UA_to_UC().
event malicious_ASM_to_UC().
event malicious_UC_to_ASM().
event malicious_Autr_to_ASM().
event malicious_ASM_to_Autr().
event leak_token().
event leak_kw().
event leak_skat().
event leak_skau().
event leak_cntr().
event leak_kid().

(********************************************************************)
(*                              Registration message format                                        *)
(********************************************************************)
fun InputUandP(Uname, bitstring):msg[data].
fun RegRSbegin(Uname, bitstring):msg[data].
fun RegSRreq(Uname,Appid,SData,Chlg):msg[data].
fun RegSRreq_null(Uname,SData,Chlg):msg[data].
fun RegRSresp(SData,AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring,bitstring):msg[data].
fun RegRUreq(Uname,Appid,SData,Chlg):msg[data].
fun RegRUreq_null(Uname,SData,Chlg):msg[data].
fun RegURresp(SData,AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring,bitstring):msg[data].
fun RegUCreq(Uname,Appid,SData,Chlg,bitstring):msg[data].
fun RegUCreq_null(Uname,SData,Chlg,bitstring):msg[data].
fun RegCUresp(SData,AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring,bitstring):msg[data].
fun RegCMreq(Uname,Appid,bitstring):msg[data].
fun RegMCresp(AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring):msg[data].
fun RegMAreq(Uname,Appid,Token,Fchlg):msg[data].
fun RegAMresp_12b(AAID,Fchlg,KeyID,CNTR,spkey,spkey,KeyID,bitstring):msg[data].
fun RegAMresp_12r(AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring):msg[data].

(********************************************************************)
(*                                            FIDO Server                                                 *)
(* 1. RegServer to registration                                                                      *)
(* 2. AuthServer to authentication                                                                 *)
(********************************************************************)

let RegUS_seta(SR:channel, appid:Appid, facetid:Facetid) =
(
	in(SR, RegRSbegin(uname, tlsdata));
    new sdata:SData;
	new chlg:Chlg;
	out(SR, RegSRreq(uname,appid,sdata,chlg));
	in(SR,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
	let FCParams(=appid,=facetid,=chlg,tlsdata) = fcp in
	if xsdata = sdata && fc = ToFc(hash(fcp)) then
	if (aaid,fc,kid,cntr,pkAU) = checksign(s,pkAT) then
	(
		event RP_success_reg(uname,appid,aaid,kid);
		out(c,debug)
	)	
).

let RegUS_noa(SR:channel, appid:Appid, facetid:Facetid) =
(
    in(SR, RegRSbegin(uname, tlsdata));
    new sdata:SData;
	new chlg:Chlg;
    out(SR, RegSRreq_null(uname,sdata,chlg));
    in(SR,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    let FCParams(appid_new,facetid,=chlg,tlsdata) = fcp in
	if appid_new = facetid_to_appid(facetid) then
    if xsdata = sdata && fc = ToFc(hash(fcp)) then
    if (aaid,fc,kid,cntr,pkAU) = checksign(s,pkAT) then
    (
        event RP_success_reg(uname,appid_new,aaid,kid);
        out(c,debug)
    )	
).

let RegUS_1b_seta(SR:channel, appid:Appid, facetid:Facetid) = RegUS_seta(SR, appid, facetid).
let RegUS_1b_noa(SR:channel, appid:Appid, facetid:Facetid) = RegUS_noa(SR, appid, facetid).
let RegUS_2b_seta(SR:channel, appid:Appid, facetid:Facetid) = RegUS_seta(SR, appid, facetid).
let RegUS_2b_noa(SR:channel, appid:Appid, facetid:Facetid) = RegUS_noa(SR, appid, facetid).
let RegUS_1r_seta(SR:channel, appid:Appid, facetid:Facetid) = RegUS_seta(SR, appid, facetid).
let RegUS_1r_noa(SR:channel, appid:Appid, facetid:Facetid) = RegUS_noa(SR, appid, facetid).
let RegUS_2r_seta(SR:channel, appid:Appid, facetid:Facetid) = RegUS_seta(SR, appid, facetid).
let RegUS_2r_noa(SR:channel, appid:Appid, facetid:Facetid) = RegUS_noa(SR, appid, facetid).

(********************************************************************)
(*                                            Relying Party                                                 *)
(********************************************************************)
let RegRP_seta(RS:channel, https:channel, uname:Uname, password:bitstring) =
(
    in(https,InputUandP(in_uname, in_password));
    if in_uname = uname then
    if in_password = password then
    let tlsdata = GetTLSdata(https) in
    out(RS,RegRSbegin(uname, tlsdata));
    in(RS,RegSRreq(uname,appid,sdata,chlg));
    out(https,RegRUreq(uname,appid,sdata,chlg));
    in(https,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(RS, RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegRP_noa(RS:channel, https:channel, uname:Uname, password:bitstring) =
(
	in(https,InputUandP(in_uname, in_password));
    if in_uname = uname then
    if in_password = password then
    let tlsdata = GetTLSdata(https) in
    out(RS,RegRSbegin(uname, tlsdata));
    in(RS,RegSRreq_null(uname,sdata,chlg));
    out(https,RegRUreq_null(uname,sdata,chlg));
    in(https,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(RS, RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegRP_1b_seta(RS:channel, https:channel, uname:Uname, password:bitstring) = RegRP_seta(RS, https, uname, password).
let RegRP_1b_noa(RS:channel, https:channel, uname:Uname, password:bitstring) = RegRP_noa(RS, https, uname, password).
let RegRP_2b_seta(RS:channel, https:channel, uname:Uname, password:bitstring) = RegRP_seta(RS, https, uname, password).
let RegRP_2b_noa(RS:channel, https:channel, uname:Uname, password:bitstring) = RegRP_noa(RS, https, uname, password).
let RegRP_1r_seta(RS:channel, https:channel, uname:Uname, password:bitstring) = RegRP_seta(RS, https, uname, password).
let RegRP_1r_noa(RS:channel, https:channel, uname:Uname, password:bitstring) = RegRP_noa(RS, https, uname, password).
let RegRP_2r_seta(RS:channel, https:channel, uname:Uname, password:bitstring) = RegRP_seta(RS, https, uname, password).
let RegRP_2r_noa(RS:channel, https:channel, uname:Uname, password:bitstring) = RegRP_noa(RS, https, uname, password).

(********************************************************************)
(*                                             User Agent                                                   *)
(* 1.  only represent a honest user agent                     					                *)
(* 2. it can visit a fake website                                                                       *)
(********************************************************************)
let RegUA_seta(https:channel,UC:channel,uname:Uname,password:bitstring) =
(
	event UA_init_reg(uname);
	out(https,InputUandP(uname,password));
	in(https,RegRUreq(xuname,appid,sdata,chlg));
    let tlsdata = GetTLSdata(https) in
    out(UC,RegUCreq(xuname,appid,sdata,chlg,tlsdata));
    in(UC, RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(https,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegUA_noa(https:channel,UC:channel,uname:Uname,password:bitstring) =
(
	event UA_init_reg(uname);
	out(https,InputUandP(uname,password));
	in(https, RegRUreq_null(xuname,sdata,chlg));
    let tlsdata = GetTLSdata(https) in
    out(UC,RegUCreq_null(xuname,sdata,chlg,tlsdata));
    in(UC, RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(https,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).


let RegUA_1b_seta(https:channel,UC:channel,uname:Uname,password:bitstring) = RegUA_seta(https,UC,uname,password).
let RegUA_1b_noa(https:channel,UC:channel,uname:Uname,password:bitstring) = RegUA_noa(https,UC,uname,password).
let RegUA_2b_seta(https:channel,UC:channel,uname:Uname,password:bitstring) = RegUA_seta(https,UC,uname,password).
let RegUA_2b_noa(https:channel,UC:channel,uname:Uname,password:bitstring) = RegUA_noa(https,UC,uname,password).
let RegUA_1r_seta(https:channel,UC:channel,uname:Uname,password:bitstring) = RegUA_seta(https,UC,uname,password).
let RegUA_1r_noa(https:channel,UC:channel,uname:Uname,password:bitstring) = RegUA_noa(https,UC,uname,password).
let RegUA_2r_seta(https:channel,UC:channel,uname:Uname,password:bitstring) = RegUA_seta(https,UC,uname,password).
let RegUA_2r_noa(https:channel,UC:channel,uname:Uname,password:bitstring) = RegUA_noa(https,UC,uname,password).

(********************************************************************)
(*                                             FIDO Client                                                  *)
(* 1. FIDO UAF client                   				                                                    *)
(********************************************************************)
let RegUC_seta(CU:channel,CM:channel,facetid:Facetid) =
(
	in(CU,RegUCreq(uname,appid,sdata,chlg,tlsdata));
	if facetid = find_facetid(appid) then
    let fcp = FCParams(appid,facetid,chlg,tlsdata) in
    out(CM,RegCMreq(uname,appid,fcp));
    in(CM,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s));
    out(CU,RegCUresp(sdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegUC_noa(CU:channel,CM:channel,facetid:Facetid) =
(
	in(CU,RegUCreq_null(uname,sdata,chlg,tlsdata));
    let appid = facetid_to_appid(facetid) in
    let fcp = FCParams(appid,facetid,chlg,tlsdata) in
    out(CM,RegCMreq(uname,appid,fcp));
    in(CM,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s));
    out(CU,RegCUresp(sdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegUC_1b_seta(CU:channel,CM:channel,facetid:Facetid) = RegUC_seta(CU,CM,facetid).
let RegUC_1b_noa(CU:channel,CM:channel,facetid:Facetid) = RegUC_noa(CU,CM,facetid).
let RegUC_2b_seta(CU:channel,CM:channel,facetid:Facetid) = RegUC_seta(CU,CM,facetid).
let RegUC_2b_noa(CU:channel,CM:channel,facetid:Facetid) = RegUC_noa(CU,CM,facetid).
let RegUC_1r_seta(CU:channel,CM:channel,facetid:Facetid) = RegUC_seta(CU,CM,facetid).
let RegUC_1r_noa(CU:channel,CM:channel,facetid:Facetid) = RegUC_noa(CU,CM,facetid).
let RegUC_2r_seta(CU:channel,CM:channel,facetid:Facetid) = RegUC_seta(CU,CM,facetid).
let RegUC_2r_noa(CU:channel,CM:channel,facetid:Facetid) = RegUC_noa(CU,CM,facetid).


(********************************************************************)
(*                                                  ASM                                                        *)
(********************************************************************)
let RegASM_1b2b(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) =
(
	in(MC, RegCMreq(uname,appid,fcp));
	let fc = ToFc(hash(fcp)) in
    (* bound authenticator send keyhandle and store it into the ASM *)
    let ak = To_12b_token(appid,token,callerid,personaid) in
    out(MA,RegMAreq(uname,appid,ak,fc));
    in(MA,RegAMresp_12b(aaid,fc2,kid,cntr,pkAT,pkAU,kh,s) );
    out(MC,RegMCresp(aaid,fc2,kid,cntr,pkAT,pkAU,s))
).

let RegASM_1r2r(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) =
(
	in(MC, RegCMreq(uname,appid,fcp) );
	let fc = ToFc(hash(fcp)) in
    let ak = To_12r_token(appid) in
    (* roaming authenticators don't send the keyhandle *)
    out(MA,RegMAreq(uname,appid,ak,fc));
    in(MA,RegAMresp_12r(aaid,fc2,kid,cntr,pkAT,pkAU,s));
    out(MC,RegMCresp(aaid,fc2,kid,cntr,pkAT,pkAU,s))
).

let RegASM_1b_seta(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1b2b(MC, MA, token, callerid, personaid).
let RegASM_1b_noa(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1b2b(MC, MA, token, callerid, personaid).
let RegASM_2b_seta(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1b2b(MC, MA, token, callerid, personaid).
let RegASM_2b_noa(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1b2b(MC, MA, token, callerid, personaid).
let RegASM_1r_seta(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1r2r(MC, MA, token, callerid, personaid).
let RegASM_1r_noa(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1r2r(MC, MA, token, callerid, personaid).
let RegASM_2r_seta(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1r2r(MC, MA, token, callerid, personaid).
let RegASM_2r_noa(MC:channel, MA:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1r2r(MC, MA, token, callerid, personaid).


(********************************************************************)
(*                                             Authenticator                                               *)
(* 1. RegServer to registration                                                                      *)
(* 2. AuthServer to authentication                                                                *)
(* Both of them use the same channel                                                           *)
(********************************************************************)
let RegAutr_1b(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =
(
	in(AM, RegMAreq(uname,appid,ak,fc));
	new skAU_seed:bitstring;
    let skAU = gen_skAU(skAU_basic,skAU_seed) in
	new cntr_seed:bitstring;
    let cntr = gen_cntr(cntr_basic,cntr_seed) in
	let pkAT = spk(skAT) in
	let pkAU = spk(skAU) in
    new kid_seed:bitstring;
    let kid = gen_kid(kid_basic, kid_seed) in
    let kh = senc((skAU,ak,uname,kid),wrapkey) in 
    let s = sign((aaid,fc,kid,cntr,pkAU),skAT) in
    event Autr_verify_reg(uname,appid,aaid,kid);
    out(AM,RegAMresp_12b(aaid,fc,kid,cntr,pkAT,pkAU,kh,s))
).

let RegAutr_2b(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =
(
	in(AM,RegMAreq(uname,appid,ak,fc));
	new skAU_seed:bitstring;
    let skAU = gen_skAU(skAU_basic,skAU_seed) in
	new cntr_seed:bitstring;
    let cntr = gen_cntr(cntr_basic,cntr_seed) in
	let pkAT = spk(skAT) in
	let pkAU = spk(skAU) in
    new kid_seed:bitstring;
    let kid = gen_kid(kid_basic, kid_seed) in
    let kh = senc((skAU,ak,kid),wrapkey) in
    let s = sign((aaid,fc,kid,cntr,pkAU),skAT) in
    event Autr_verify_reg(uname,appid,aaid,kid);
    out(AM,RegAMresp_12b(aaid,fc,kid,cntr,pkAT,pkAU,kh,s))
).

let RegAutr_1r(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =
(
	in(AM,RegMAreq(uname,appid,ak,fc));
	new skAU_seed:bitstring;
    let skAU = gen_skAU(skAU_basic,skAU_seed) in
	new cntr_seed:bitstring;
    let cntr = gen_cntr(cntr_basic,cntr_seed) in
	let pkAT = spk(skAT) in
	let pkAU = spk(skAU) in
     new kid_seed:bitstring;
    let kid = gen_kid(kid_basic, kid_seed) in
    let kh = senc((skAU,ak,uname,kid),wrapkey) in 
    let s = sign((aaid,fc,kid,cntr,pkAU),skAT) in
    event Autr_verify_reg(uname,appid,aaid,kid);
    out(AM,RegAMresp_12r(aaid,fc,kid,cntr,pkAT,pkAU,s))
).

let RegAutr_2r(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =
(
	in(AM,RegMAreq(uname,appid,ak,fc));
	new skAU_seed:bitstring;
    let skAU = gen_skAU(skAU_basic,skAU_seed) in
	new cntr_seed:bitstring;
    let cntr = gen_cntr(cntr_basic,cntr_seed) in
	let pkAT = spk(skAT) in
	let pkAU = spk(skAU) in
    let kh = senc((skAU,ak),wrapkey) in
    let kid = kh in
    let s = sign((aaid,fc,kid,cntr,pkAU),skAT) in
    event Autr_verify_reg(uname,appid,aaid,kid);
    out(AM,RegAMresp_12r(aaid,fc,kid,cntr,pkAT,pkAU,s))   
).

let RegAutr_1b_seta(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_1b(AM,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_1b_noa(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_1b(AM,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_2b_seta(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_2b(AM,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_2b_noa(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_2b(AM,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_1r_seta(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_1r(AM,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_1r_noa(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_1r(AM,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_2r_seta(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_2r(AM,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_2r_noa(AM:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_2r(AM,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).

(**************************message format 2*******************************)
fun AuthSRreq_em(Appid,SData,Chlg):msg[data].
fun AuthSRreq_em_null(SData,Chlg):msg[data].
fun AuthRSresp_em(SData,AAID,Nonce,Fchlg,KeyID,CNTR,bitstring,bitstring):msg[data].
fun AuthSRreq_st(Appid,KeyID,SData,Chlg,Tr):msg[data].
fun AuthSRreq_st_null(KeyID,SData,Chlg,Tr):msg[data].
fun AuthRSresp_st(SData,AAID,Nonce,Fchlg,Tr,KeyID,CNTR,bitstring,bitstring):msg[data].
fun AuthRUreq_em(Appid,SData,Chlg):msg[data].
fun AuthRUreq_em_null(SData,Chlg):msg[data].
fun AuthURresp_em(SData,AAID,Nonce,Fchlg,KeyID,CNTR,bitstring,bitstring):msg[data].
fun AuthRUreq_st(Appid,KeyID,SData,Chlg,Tr):msg[data].
fun AuthRUreq_st_null(KeyID,SData,Chlg,Tr):msg[data].
fun AuthURresp_st(SData,AAID,Nonce,Fchlg,Tr,KeyID,CNTR,bitstring,bitstring):msg[data].
fun AuthUCreq_em(Appid,SData,Chlg,bitstring):msg[data].
fun AuthUCreq_em_null(SData,Chlg,bitstring):msg[data].
fun AuthCUresp_em(SData,AAID,Nonce,Fchlg,KeyID,CNTR,bitstring,bitstring):msg[data].
fun AuthUCreq_st(Appid,KeyID,SData,Chlg,Tr,bitstring):msg[data].
fun AuthUCreq_st_null(KeyID,SData,Chlg,Tr,bitstring):msg[data].
fun AuthCUresp_st(SData,AAID,Nonce,Fchlg,Tr,KeyID,CNTR,bitstring,bitstring):msg[data].
fun AuthCMreq_em(Appid,bitstring):msg[data].
fun AuthMCresp_em(AAID,Nonce,Fchlg,KeyID,CNTR,bitstring):msg[data].
fun AuthCMreq_st(Appid,bitstring,KeyID,Tr):msg[data].
fun AuthMCresp_st(AAID,Nonce,Fchlg,Tr,KeyID,CNTR,bitstring):msg[data].
fun AuthMAreq_1bem(Token,Fchlg,Appid,KeyID):msg[data].
fun AuthMAreq_1bst(Token,Fchlg,Appid,KeyID,Tr):msg[data].
fun AuthMAreq_2bst(Token,Fchlg,Appid,KeyID,Tr):msg[data].
fun AuthMAreq_1rem(Token,Fchlg,Appid):msg[data].
fun AuthMAreq_1rst(Token,Fchlg,Appid,KeyID,Tr):msg[data].
fun AuthMAreq_2rst(Token,Fchlg,Appid,KeyID,Tr):msg[data].
fun AuthAMresp_em(AAID,Nonce,Fchlg,KeyID,CNTR,bitstring):msg[data].
fun AuthAMresp_st(AAID,Nonce,Fchlg,Tr,KeyID,CNTR,bitstring):msg[data].
(********************************************************************)
(*                                               Event                                                          *)
(********************************************************************)

event RP_success_auth(Uname,Appid,AAID,KeyID).
event RP_success_tr(Tr).
event UA_launch_auth(Uname).
event UA_launch_auth_tr(Tr).
event Autr_verify_auth_1br(Uname,AAID,KeyID).
event Autr_verify_auth_2br(AAID,KeyID).
event Autr_verify_tr(Tr).

const ok:bitstring.

(********************************************************************)
(**************************main process*******************************)
(********************************************************************)
(********************************************************************)
(*                                                  Auth US                                                        *)
(********************************************************************)
let AuthUS_login_seta(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) =
(
    new sdata:SData;
	new chlg:Chlg;
    out(SR,AuthSRreq_em(appid,sdata,chlg));
    in(SR,AuthRSresp_em(new_sdata,new_aaid,nonce,fc,new_kid,xcntr,fcp,s));
    if new_sdata = sdata then
    if new_aaid = aaid then
    if new_kid = kid then
    let FCParams(=appid,facetid,=chlg,tlsdata) = fcp in
	if facetid = find_facetid(appid) then
    if fc = ToFc(hash(fcp)) then
    if (aaid,nonce,fc,kid,xcntr) = checksign(s,pkAU) then
    if xcntr = cntr then
    event RP_success_auth(uname,appid,aaid,kid);
    out(c,debug)
 ).
 
let AuthUS_login_noa(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) =
(
    new sdata:SData;
	new chlg:Chlg;
    out(SR,AuthSRreq_em_null(sdata,chlg));
    in(SR,AuthRSresp_em(new_sdata,new_aaid,nonce,fc,new_kid,xcntr,fcp,s));
    if new_sdata = sdata then
    if new_aaid = aaid then
    if new_kid = kid then
    let FCParams(appid_new,facetid,=chlg,tlsdata) = fcp in
	if appid_new = facetid_to_appid(facetid) then
    if facetid = find_facetid(appid) then
    if fc = ToFc(hash(fcp)) then
    if (aaid,nonce,fc,kid,xcntr) = checksign(s,pkAU) then
    if xcntr = cntr then
    event RP_success_auth(uname,appid_new,aaid,kid);
    out(c,debug)
 ).
 
 let AuthUS_stepup_seta(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) =
(
    new sdata:SData;
	new chlg:Chlg;
    out(SR,AuthSRreq_st(appid,kid,sdata,chlg,tr));
    in(SR,AuthRSresp_st(new_sdata,new_aaid,nonce,fc,htr,new_kid,xcntr,fcp,s));
    if new_sdata = sdata then
    if new_aaid = aaid then
    if new_kid = kid then
    let FCParams(=appid,facetid,=chlg,tlsdata) = fcp in
    if facetid = find_facetid(appid) then
    if fc = ToFc(hash(fcp)) then
    if htr = hash_tr(tr) then
    if (aaid,nonce,fc,htr,kid,xcntr) = checksign(s,pkAU) then
    if xcntr = cntr then
    event RP_success_auth(uname,appid,aaid,kid);
    event RP_success_tr(tr);
    out(c,debug)
 ).

 
let AuthUS_stepup_noa(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) =
(
    new sdata:SData;
	new chlg:Chlg;
    out(SR,AuthSRreq_st_null(kid,sdata,chlg,tr));
    in(SR,AuthRSresp_st(new_sdata,new_aaid,nonce,fc,htr,new_kid,xcntr,fcp,s));
    if new_sdata = sdata then
    if new_aaid = aaid then
    if new_kid = kid then
    let FCParams(appid_new,facetid,=chlg,tlsdata) = fcp in
	if appid_new = facetid_to_appid(facetid) then
    if facetid = find_facetid(appid) then
    if fc = ToFc(hash(fcp)) then
    if htr = hash_tr(tr) then
    if (aaid,nonce,fc,htr,kid,xcntr) = checksign(s,pkAU) then
    if xcntr = cntr then
    event RP_success_auth(uname,appid_new,aaid,kid);
    event RP_success_tr(tr);
    out(c,debug)
 ).
 
let AuthUS_1b_login_seta(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_login_seta(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_1b_login_noa(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_login_noa(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_1b_stepup_seta(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_stepup_seta(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_1b_stepup_noa(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_stepup_noa(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_2b_stepup_seta(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_stepup_seta(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_2b_stepup_noa(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_stepup_noa(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_1r_login_seta(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_login_seta(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_1r_login_noa(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_login_noa(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_1r_stepup_seta(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_stepup_seta(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_1r_stepup_noa(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_stepup_noa(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_2r_stepup_seta(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_stepup_seta(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
let AuthUS_2r_stepup_noa(SR:channel, uname:Uname, appid:Appid, aaid:AAID, kid:KeyID, pkAU:spkey, cntr:CNTR, tr:Tr) = AuthUS_stepup_noa(SR, uname,appid,aaid,kid,pkAU,cntr,tr).
	
(********************************************************************)
(*                                                  AuthRP                                                        *)
(********************************************************************)
    
let AuthRP_login_seta(RS:channel,https:channel) = 
(
    in(RS,AuthSRreq_em(appid,sdata,chlg));
    let tlsdata = GetTLSdata(https) in
    out(https,AuthRUreq_em(appid,sdata,chlg));
    in(https,AuthURresp_em(xsdata,aaid,nonce,fc,kid,xcntr,fcp,s));
    out(RS, AuthRSresp_em(xsdata,aaid,nonce,fc,kid,xcntr,fcp,s))
).

let AuthRP_login_noa(RS:channel,https:channel) = 
(
    in(RS,AuthSRreq_em_null(sdata,chlg));
    let tlsdata = GetTLSdata(https) in  
    out(https,AuthRUreq_em_null(sdata,chlg));
    in(https,AuthURresp_em(xsdata,aaid,nonce,fc,kid,xcntr,fcp,s));
    out(RS, AuthRSresp_em(xsdata,aaid,nonce,fc,kid,xcntr,fcp,s))
).
let AuthRP_stepup_seta(RS:channel,https:channel) = 
(
    in(RS,AuthSRreq_st(appid,kid,sdata,chlg,tr));  
    let tlsdata = GetTLSdata(https) in
    out(https,AuthRUreq_st(appid,kid,sdata,chlg,tr));
    in(https,AuthURresp_st(xsdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s));
    out(RS, AuthRSresp_st(xsdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s))
).
let AuthRP_stepup_noa(RS:channel,https:channel) = 
(
     in(RS,AuthSRreq_st_null(kid,sdata,chlg,tr));
    let tlsdata = GetTLSdata(https) in
    out(https,AuthRUreq_st_null(kid,sdata,chlg,tr));
    in(https,AuthURresp_st(xsdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s));
    out(RS, AuthRSresp_st(xsdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s))
).

let AuthRP_1b_login_seta(RS:channel,https:channel) = AuthRP_login_seta(RS,https).
let AuthRP_1b_login_noa(RS:channel,https:channel) = AuthRP_login_noa(RS,https).
let AuthRP_1b_stepup_seta(RS:channel,https:channel) = AuthRP_stepup_seta(RS,https).
let AuthRP_1b_stepup_noa(RS:channel,https:channel) = AuthRP_stepup_noa(RS,https).
let AuthRP_2b_stepup_seta(RS:channel,https:channel) = AuthRP_stepup_seta(RS,https).
let AuthRP_2b_stepup_noa(RS:channel,https:channel) = AuthRP_stepup_noa(RS,https).
let AuthRP_1r_login_seta(RS:channel,https:channel) = AuthRP_login_seta(RS,https).
let AuthRP_1r_login_noa(RS:channel,https:channel) = AuthRP_login_noa(RS,https).
let AuthRP_1r_stepup_seta(RS:channel,https:channel) = AuthRP_stepup_seta(RS,https).
let AuthRP_1r_stepup_noa(RS:channel,https:channel) = AuthRP_stepup_noa(RS,https).
let AuthRP_2r_stepup_seta(RS:channel,https:channel) = AuthRP_stepup_seta(RS,https).
let AuthRP_2r_stepup_noa(RS:channel,https:channel) = AuthRP_stepup_noa(RS,https).


(********************************************************************)
(*                                                  AuthUA                                                        *)
(********************************************************************)

let AuthUA_login_seta(https:channel,UC:channel,uname:Uname) =
(
	in(https,AuthRUreq_em(appid,sdata,chlg) );
    event UA_launch_auth(uname);
    let tlsdata = GetTLSdata(https) in
    out(UC,AuthUCreq_em(appid,sdata,chlg,tlsdata));
    in(UC,AuthCUresp_em(xsdata,aaid,nonce,fc,kid,xcntr,fcp,s));
    out(https,AuthURresp_em(xsdata,aaid,nonce,fc,kid,xcntr,fcp,s))
 ).
let AuthUA_stepup_seta(https:channel,UC:channel,uname:Uname) =
(
	in(https,AuthRUreq_st(appid,kid,sdata,chlg,tr2));
    event UA_launch_auth(uname);
    event UA_launch_auth_tr(tr2);
    let tlsdata = GetTLSdata(https) in
    out(UC,AuthUCreq_st(appid,kid,sdata,chlg,tr2,tlsdata));
    in(UC,AuthCUresp_st(xsdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s));
    out(https,AuthURresp_st(xsdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s))
 ).
let AuthUA_login_noa(https:channel,UC:channel,uname:Uname) =
(
	in(https,AuthRUreq_em_null(sdata,chlg));
    event UA_launch_auth(uname);
    let tlsdata = GetTLSdata(https) in
    out(UC,AuthUCreq_em_null(sdata,chlg,tlsdata));
    in(UC,AuthCUresp_em(xsdata,aaid,nonce,fc,kid,xcntr,fcp,s));
    out(https,AuthURresp_em(xsdata,aaid,nonce,fc,kid,xcntr,fcp,s))
 ).
 
let AuthUA_stepup_noa(https:channel,UC:channel,uname:Uname) =
(
	in(https,AuthRUreq_st_null(kid,sdata,chlg,tr2));
    event UA_launch_auth(uname);
    event UA_launch_auth_tr(tr2);
    let tlsdata = GetTLSdata(https) in
    out(UC,AuthUCreq_st_null(kid,sdata,chlg,tr2,tlsdata));
    in(UC,AuthCUresp_st(xsdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s) );
    out(https,AuthURresp_st(xsdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s))
 ).
 
let AuthUA_1b_login_seta(https:channel,UC:channel,uname:Uname) = AuthUA_login_seta(https,UC,uname).
let AuthUA_1b_login_noa(https:channel,UC:channel,uname:Uname) = AuthUA_login_noa(https,UC,uname).
let AuthUA_1b_stepup_seta(https:channel,UC:channel,uname:Uname) = AuthUA_stepup_seta(https,UC,uname).
let AuthUA_1b_stepup_noa(https:channel,UC:channel,uname:Uname) = AuthUA_stepup_noa(https,UC,uname).
let AuthUA_2b_stepup_seta(https:channel,UC:channel,uname:Uname) = AuthUA_stepup_seta(https,UC,uname).
let AuthUA_2b_stepup_noa(https:channel,UC:channel,uname:Uname) = AuthUA_stepup_noa(https,UC,uname).
let AuthUA_1r_login_seta(https:channel,UC:channel,uname:Uname) = AuthUA_login_seta(https,UC,uname).
let AuthUA_1r_login_noa(https:channel,UC:channel,uname:Uname) = AuthUA_login_noa(https,UC,uname).
let AuthUA_1r_stepup_seta(https:channel,UC:channel,uname:Uname) = AuthUA_stepup_seta(https,UC,uname).
let AuthUA_1r_stepup_noa(https:channel,UC:channel,uname:Uname) = AuthUA_stepup_noa(https,UC,uname).
let AuthUA_2r_stepup_seta(https:channel,UC:channel,uname:Uname) = AuthUA_stepup_seta(https,UC,uname).
let AuthUA_2r_stepup_noa(https:channel,UC:channel,uname:Uname) = AuthUA_stepup_noa(https,UC,uname).

(********************************************************************)
(*                                                  AuthUC                                                        *)
(********************************************************************)

let AuthUC_login_seta(CU:channel,CM:channel,facetid:Facetid) =
(
	in(CU,AuthUCreq_em(appid,sdata,chlg,tlsdata));
	 if facetid = find_facetid(appid) then
    let fcp = FCParams(appid,facetid,chlg,tlsdata) in
    out(CM,AuthCMreq_em(appid,fcp));
    in(CM,AuthMCresp_em(aaid,nonce,fc,kid,xcntr,s) );
    out(CU,AuthCUresp_em(sdata,aaid,nonce,fc,kid,xcntr,fcp,s))
).

let AuthUC_stepup_seta(CU:channel,CM:channel,facetid:Facetid) =
(
	in(CU,AuthUCreq_st(appid,kid,sdata,chlg,tr,tlsdata) );
    if facetid = find_facetid(appid) then
    let fcp = FCParams(appid,facetid,chlg,tlsdata) in
    out(CM,AuthCMreq_st(appid,fcp,kid,tr));
    in(CM,AuthMCresp_st(aaid,nonce,fc,htr,xkid,xcntr,s));
    out(CU,AuthCUresp_st(sdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s))
).

let AuthUC_login_noa(CU:channel,CM:channel,facetid:Facetid) =
(
	in(CU,AuthUCreq_em_null(sdata,chlg,tlsdata));
    let appid = facetid_to_appid(facetid) in
    let fcp = FCParams(appid,facetid,chlg,tlsdata) in
    out(CM,AuthCMreq_em(appid,fcp));
    in(CM,AuthMCresp_em(aaid,nonce,fc,kid,xcntr,s));
    out(CU,AuthCUresp_em(sdata,aaid,nonce,fc,kid,xcntr,fcp,s))
).

let AuthUC_stepup_noa(CU:channel,CM:channel,facetid:Facetid) =
(
	in(CU,AuthUCreq_st_null(kid,sdata,chlg,tr,tlsdata));
    let appid = facetid_to_appid(facetid) in
    let fcp = FCParams(appid,facetid,chlg,tlsdata) in
    out(CM,AuthCMreq_st(appid,fcp,kid,tr));
    in(CM,AuthMCresp_st(aaid,nonce,fc,htr,xkid,xcntr,s));
    out(CU,AuthCUresp_st(sdata,aaid,nonce,fc,htr,xkid,xcntr,fcp,s))
).

let AuthUC_1b_login_seta(CU:channel,CM:channel,facetid:Facetid) = AuthUC_login_seta(CU,CM,facetid).
let AuthUC_1b_login_noa(CU:channel,CM:channel,facetid:Facetid) = AuthUC_login_noa(CU,CM,facetid).
let AuthUC_1b_stepup_seta(CU:channel,CM:channel,facetid:Facetid) = AuthUC_stepup_seta(CU,CM,facetid).
let AuthUC_1b_stepup_noa(CU:channel,CM:channel,facetid:Facetid) = AuthUC_stepup_noa(CU,CM,facetid).
let AuthUC_2b_stepup_seta(CU:channel,CM:channel,facetid:Facetid) = AuthUC_stepup_seta(CU,CM,facetid).
let AuthUC_2b_stepup_noa(CU:channel,CM:channel,facetid:Facetid) = AuthUC_stepup_noa(CU,CM,facetid).
let AuthUC_1r_login_seta(CU:channel,CM:channel,facetid:Facetid) = AuthUC_login_seta(CU,CM,facetid).
let AuthUC_1r_login_noa(CU:channel,CM:channel,facetid:Facetid) = AuthUC_login_noa(CU,CM,facetid).
let AuthUC_1r_stepup_seta(CU:channel,CM:channel,facetid:Facetid) = AuthUC_stepup_seta(CU,CM,facetid).
let AuthUC_1r_stepup_noa(CU:channel,CM:channel,facetid:Facetid) = AuthUC_stepup_noa(CU,CM,facetid).
let AuthUC_2r_stepup_seta(CU:channel,CM:channel,facetid:Facetid) = AuthUC_stepup_seta(CU,CM,facetid).
let AuthUC_2r_stepup_noa(CU:channel,CM:channel,facetid:Facetid) = AuthUC_stepup_noa(CU,CM,facetid).

(********************************************************************)
(*                                                  AuthASM                                                        *)
(********************************************************************)

let AuthASM_1b_login(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) =
(
	in(MC,AuthCMreq_em(appid,fcp) );
	(*if appid = trust_appid then*)
    if callerid = trust_callerid then
    let fc = ToFc(hash(fcp)) in
    let ak = To_12b_token(appid,token,callerid,personaid) in 
    out(MA,AuthMAreq_1bem(ak,fc,appid,kh));
    in(MA,AuthAMresp_em(aaid,nonce,xfc,xkid,xcntr,s) );
    out(MC,AuthMCresp_em(aaid,nonce,xfc,xkid,xcntr,s))
).
let AuthASM_1b_stepup(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) =
(
	in(MC,AuthCMreq_st(appid,fcp,kid,tr) );
	(*if appid = trust_appid then*)
	if kid = trust_kid then
     if callerid = trust_callerid then
    let fc = ToFc(hash(fcp)) in
    let ak = To_12b_token(appid,token,callerid,personaid) in 
    out(MA,AuthMAreq_1bst(ak,fc,appid,kh,tr));
    in(MA,AuthAMresp_st(aaid,nonce,xfc,htr,xkid,xcntr,s));
    out(MC,AuthMCresp_st(aaid,nonce,xfc,htr,xkid,xcntr,s))
).
let AuthASM_2b_stepup(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) =
(
	in(MC,AuthCMreq_st(appid,fcp,kid,tr));
   (*if appid = trust_appid then*)
	if kid = trust_kid then
    if callerid = trust_callerid then
    let fc = ToFc(hash(fcp)) in
    let ak = To_12b_token(appid,token,callerid,personaid) in 
    out(MA,AuthMAreq_2bst(ak,fc,appid,kh,tr));
    in(MA,AuthAMresp_st(aaid,nonce,xfc,htr,xkid,xcntr,s));
    out(MC,AuthMCresp_st(aaid,nonce,xfc,htr,xkid,xcntr,s))
).
let AuthASM_1r_login(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) =
(
	in(MC,AuthCMreq_em(appid,fcp));
    let fc = ToFc(hash(fcp)) in
    let ak = To_12r_token(appid) in
    out(MA,AuthMAreq_1rem(ak,fc,appid));
    in(MA,AuthAMresp_em(aaid,nonce,xfc,kid,xcntr,s));
    out(MC,AuthMCresp_em(aaid,nonce,xfc,kid,xcntr,s))
).
let AuthASM_1r_stepup(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) =
(
	in(MC,AuthCMreq_st(appid,fcp,kid,tr) );
    let fc = ToFc(hash(fcp)) in
    let ak = To_12r_token(appid) in
    out(MA,AuthMAreq_1rst(ak,fc,appid,kid,tr));
    in(MA,AuthAMresp_st(aaid,nonce,xfc,htr,xkid,xcntr,s) );
    out(MC,AuthMCresp_st(aaid,nonce,xfc,htr,xkid,xcntr,s))
).
let AuthASM_2r_stepup(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) =
(
	in(MC,AuthCMreq_st(appid,fcp,kid,tr));
    let fc = ToFc(hash(fcp)) in
    let ak = To_12r_token(appid) in
    out(MA,AuthMAreq_2rst(ak,fc,appid,kid,tr));
    in(MA,AuthAMresp_st(aaid,nonce,xfc,htr,xkid,xcntr,s));
    out(MC,AuthMCresp_st(aaid,nonce,xfc,htr,xkid,xcntr,s))
).

let AuthASM_1b_login_seta(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_1b_login(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_1b_login_noa(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_1b_login(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_1b_stepup_seta(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_1b_stepup(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_1b_stepup_noa(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_1b_stepup(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_2b_stepup_seta(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_2b_stepup(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_2b_stepup_noa(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_2b_stepup(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_1r_login_seta(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_1r_login(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_1r_login_noa(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_1r_login(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_1r_stepup_seta(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_1r_stepup(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_1r_stepup_noa(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_1r_stepup(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_2r_stepup_seta(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_2r_stepup(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).
let AuthASM_2r_stepup_noa(MC:channel,MA:channel,token:bitstring,callerid:Callerid,trust_callerid:Callerid,personaid:PersonaID,trust_appid:Appid,trust_kid:KeyID,kh:KeyID) = AuthASM_2r_stepup(MC,MA,token,callerid,trust_callerid,personaid,trust_appid,trust_kid,kh).

(********************************************************************)
(*                                               Auth Authenticator                                                   *)
(********************************************************************)

let AuthAutr_1b_login(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) =
(
	in(AM,AuthMAreq_1bem(ak,fc,appid,in_kh) );
    let (skAU:sskey,=ak,uname:Uname,kid:KeyID) = sdec(in_kh,wrapkey) in
   (* if f1(ak,appid) = aka then*)
    let pkAU = spk(skAU) in
    new nonce:Nonce;
    let s = sign((aaid,nonce,fc,kid,cntr),skAU) in
    event Autr_verify_auth_1br(uname,aaid,kid);
    out(AM,AuthAMresp_em(aaid,nonce,fc,kid,cntr,s))
).
let AuthAutr_1b_stepup(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) =
(
	in(AM,AuthMAreq_1bst(ak,fc,appid,in_kh,in_tr));
    (*if in_tr = tr then*)
    let (skAU:sskey,=ak,uname:Uname,kid:KeyID) = sdec(in_kh,wrapkey) in
    (*if f1(ak,appid) = aka then*)
    let pkAU = spk(skAU) in
    let htr = hash_tr(in_tr) in
    new nonce:Nonce;
    let s = sign((aaid,nonce,fc,htr,kid,cntr),skAU) in
    event Autr_verify_auth_1br(uname,aaid,kid);
    event Autr_verify_tr(in_tr);
    out(AM,AuthAMresp_st(aaid,nonce,fc,htr,kid,cntr,s))
).
let AuthAutr_2b_stepup(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) =
(
	in(AM,AuthMAreq_2bst(ak,fc,appid,in_kh,in_tr));
    (*if in_tr = tr then*)
    let (skAU:sskey,=ak,kid:KeyID) = sdec(in_kh,wrapkey) in
    (*if f1(ak,appid) = aka then*)
    let pkAU = spk(skAU) in
    let htr = hash_tr(in_tr) in
    new nonce:Nonce;
    let s = sign((aaid,nonce,fc,htr,kid,cntr),skAU) in
    event Autr_verify_auth_2br(aaid,kid);
    event Autr_verify_tr(in_tr);
    out(AM,AuthAMresp_st(aaid,nonce,fc,htr,kid,cntr,s))
).
let AuthAutr_1r_login(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) =
(
	in(AM,AuthMAreq_1rem(ak,fc,appid));
	(*if appid = trust_appid then*)
    let (skAU:sskey,=ak,uname:Uname,kid:KeyID) = sdec(kh,wrapkey) in
    (*if f1(ak,appid) = aka then*)
    let pkAU = spk(skAU) in
    new nonce:Nonce;
    let s = sign((aaid,nonce,fc,kid,cntr),skAU) in 
    event Autr_verify_auth_1br(uname,aaid,kid);
    out(AM,AuthAMresp_em(aaid,nonce,fc,kid,cntr,s))
).
let AuthAutr_1r_stepup(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) =
(
	in(AM,AuthMAreq_1rst(ak,fc,appid,kid,in_tr) );
    (*if in_tr = tr then*)
	(*if appid = trust_appid then*)
    let (skAU:sskey,=ak,uname:Uname,xkid:KeyID) = sdec(kh,wrapkey) in
    (*if f1(ak,appid) = aka then*)
    let pkAU = spk(skAU) in
    let htr = hash_tr(in_tr) in
    new nonce:Nonce;
    let s = sign((aaid,nonce,fc,htr,kid,cntr),skAU) in
    event Autr_verify_auth_1br(uname,aaid,kid);
    event Autr_verify_tr(in_tr);
    out(AM,AuthAMresp_st(aaid,nonce,fc,htr,kid,cntr,s))
).
let AuthAutr_2r_stepup(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) =
(
	in(AM,AuthMAreq_2rst(ak,fc,appid,kid,in_tr) );
    (*if in_tr = tr then*)
    let (skAU:sskey,=ak) = sdec(kid,wrapkey) in
    (*if f1(ak,appid) = aka then*)
    let pkAU = spk(skAU) in
    let htr = hash_tr(in_tr) in
    new nonce:Nonce;
    let s = sign((aaid,nonce,fc,htr,kid,cntr),skAU) in
    event Autr_verify_auth_2br(aaid,kid);
    event Autr_verify_tr(in_tr);
    out(AM,AuthAMresp_st(aaid,nonce,fc,htr,kid,cntr,s))
).

let AuthAutr_1b_login_seta(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_1b_login(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_1b_login_noa(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_1b_login(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_1b_stepup_seta(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_1b_stepup(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_1b_stepup_noa(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_1b_stepup(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_2b_stepup_seta(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_2b_stepup(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_2b_stepup_noa(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_2b_stepup(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_1r_login_seta(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_1r_login(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_1r_login_noa(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_1r_login(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_1r_stepup_seta(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_1r_stepup(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_1r_stepup_noa(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_1r_stepup(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_2r_stepup_seta(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) 
= AuthAutr_2r_stepup(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).
let AuthAutr_2r_stepup_noa(AM:channel,aaid:AAID,wrapkey:key,cntr:CNTR,tr:Tr,trust_appid:Appid,kh:KeyID) = AuthAutr_2r_stepup(AM,aaid,wrapkey,cntr,tr,trust_appid,kh).

