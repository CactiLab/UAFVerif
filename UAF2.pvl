
set traceDisplay = none.
set reconstructTrace = false.
set verboseClauses = none.
set explainDerivation = false.
set reconstructDerivation = false.
set displayDerivation = false.
set abbreviateClauses = true.
set verboseEq = false.
set verboseTerm = false.
(********************************************************************)
(*                           Messages Type declaration                                        	    *)
(********************************************************************)
type msg.
type msg_RS.
type msg_SR.
type msg_UR.
type msg_RU.
type msg_UC.
type msg_CU.
type msg_CM.
type msg_MC.
type msg_MA.
type msg_AM.

type Uname.
type Appid.
type Facetid.
type Callerid.
type PersonaID.
type SData.
type Chlg.
type Fchlg.
type Tr.
type Token.
type AAID.
type CNTR.
type Nonce.
type KeyID.
type TLSData.

(********************************************************************)
(*                                  Symmetric encryption     		                         	        *)
(********************************************************************)
type key.
type Senc_alg.
const WeakSenc:Senc_alg[private].

fun senc(bitstring,key):KeyID.
reduc forall m: bitstring, k:key; sdec(senc(m,k),k) = m.

fun senc_msg(msg,key):msg.
reduc forall m: msg, k:key; sdec_msg(senc_msg(m,k),k) = m.

(********************************************************************)
(*                                      Signature function                                                *)
(********************************************************************)
type spkey.
type sskey.

fun spk(sskey):spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m: bitstring, ssk: sskey; checksign(sign(m,ssk),spk(ssk)) = m.
reduc forall m: bitstring, ssk: sskey; getmess(sign(m,ssk)) = m.



(********************************************************************)
(*                                           Hash Functions.   					                        *)
(********************************************************************)

fun hash(bitstring): bitstring.
fun hash_a(Appid):bitstring.
fun hash_tr(Tr): Tr.

(********************************************************************)
(*              Final Challenge Params function to compute a FCP params               *)
(********************************************************************)

fun FCParams(Appid,Facetid,Chlg,TLSData):bitstring[data].

(********************************************************************)
(*                                     Get TLSDATA from channel               	                *)
(********************************************************************)

fun GetTLSdata(channel,channel):TLSData.
  
(********************************************************************)
(*                         Increasing counter value                                                    *)
(********************************************************************)

fun Incr(CNTR):CNTR.
reduc forall cntr:CNTR; ReIncr(Incr(cntr)) = cntr.

(********************************************************************)
(*                 Get KHAccess token from a random ASMtoken                           *)
(********************************************************************)

fun To_12b_token(Appid,bitstring,Callerid,PersonaID):Token.
fun To_12r_token(Appid):Token.
fun f1(Token,Appid):Token.

(********************************************************************)
(*  Get final challenge hash from the random hash value of the final challenge *)
(********************************************************************)

fun ToFc(bitstring):Fchlg.

(********************************************************************)
(*                                            facetid to appid                                                *)
(********************************************************************)
fun facetid_to_appid(Facetid):Appid.

(********************************************************************)
(*                                            gen_skAU                                                *)
(********************************************************************)
fun gen_skAU(sskey,bitstring):sskey.
fun gen_cntr(CNTR,bitstring):CNTR.
fun gen_kid(KeyID,bitstring):KeyID.
(********************************************************************)
(*                                  table for database                                                    *)
(********************************************************************)

table AppList(Appid,Facetid).
table AuthAppList(Appid,Facetid).
table ASMDB(Appid,KeyID,KeyID).
table TrustCallerid(Callerid).
table AutrDB(Appid,KeyID,KeyID).
(********************************************************************)
(*                                   channel declarations                                               *)
(********************************************************************)
free c:channel.


(********************************************************************)
(*                                   const declarations                                                   *)
(********************************************************************)

const debug:bitstring[private].
const reg_cntr:CNTR[private].
const auth_cntr:CNTR[private].

(********************************************************************)
(*                                               Event                                                          *)
(********************************************************************)
event RP_success_reg(Uname,Appid,AAID,KeyID).
event UA_init_reg(Uname).
event Autr_verify_reg(Uname,Appid,AAID,KeyID).

event malicious_RP_to_US().
event malicious_US_to_RP().
event malicious_RP_to_UA().
event malicious_UC_to_UA().
event malicious_UA_to_RP().
event malicious_UA_to_UC().
event malicious_ASM_to_UC().
event malicious_UC_to_ASM().
event malicious_Autr_to_ASM().
event malicious_ASM_to_Autr().
event leak_token().
event leak_kw().
event leak_skat().
event leak_skau().
event leak_cntr().
event leak_kid().

(********************************************************************)
(*                              Registration message format                                        *)
(********************************************************************)
fun InputUandP(Uname, bitstring):msg_UR[data].
fun RegRSbegin(Uname, TLSData):msg_RS[data].
fun RegSRreq(Uname,Appid,SData,Chlg):msg_SR[data].
fun RegSRreq_null(Uname,SData,Chlg):msg_SR[data].
fun RegRSresp(SData,AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring,bitstring):msg_RS[data].
fun RegRUreq(Uname,Appid,SData,Chlg):msg_RU[data].
fun RegRUreq_null(Uname,SData,Chlg):msg_RU[data].
fun RegURresp(SData,AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring,bitstring):msg_UR[data].
fun RegUCreq(Uname,Appid,SData,Chlg,TLSData):msg_UC[data].
fun RegUCreq_null(Uname,SData,Chlg,TLSData):msg_UC[data].
fun RegCUresp(SData,AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring,bitstring):msg_CU[data].
fun RegCMreq(Uname,Appid,bitstring):msg_CM[data].
fun RegMCresp(AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring):msg_MC[data].
fun RegMAreq(Uname,Appid,Token,Fchlg):msg_MA[data].
fun RegAMresp_12b(AAID,Fchlg,KeyID,CNTR,spkey,spkey,KeyID,bitstring):msg_AM[data].
fun RegAMresp_12r(AAID,Fchlg,KeyID,CNTR,spkey,spkey,bitstring):msg_AM[data].

(********************************************************************)
(*                                            FIDO Server                                                 *)
(* 1. RegServer to registration                                                                      *)
(* 2. AuthServer to authentication                                                                 *)
(********************************************************************)

let RegUS_seta(ch_US:channel, appid:Appid, facetid:Facetid) =
(
	in(ch_US, RegRSbegin(uname, tlsdata));
    new sdata:SData;
	new chlg:Chlg;
	out(ch_US, RegSRreq(uname,appid,sdata,chlg));
	in(ch_US,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
	let FCParams(=appid,=facetid,=chlg,=tlsdata) = fcp in
	if xsdata = sdata && fc = ToFc(hash(fcp)) then
	if (aaid,fc,kid,cntr,pkAU) = checksign(s,pkAT) then
	(
		event RP_success_reg(uname,appid,aaid,kid);
		out(c,debug)
	)	
).

let RegUS_noa(ch_US:channel, appid:Appid, facetid:Facetid) =
(   
    in(ch_US, RegRSbegin(uname, tlsdata));
    new sdata:SData;
	new chlg:Chlg;
    out(ch_US, RegSRreq_null(uname,sdata,chlg));
    in(ch_US,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    let FCParams(appid_new,=facetid,=chlg,=tlsdata) = fcp in
	if appid_new = facetid_to_appid(facetid) then
    if xsdata = sdata && fc = ToFc(hash(fcp)) then
    if (aaid,fc,kid,cntr,pkAU) = checksign(s,pkAT) then
    (
        event RP_success_reg(uname,appid_new,aaid,kid);
        out(c,debug)
    )
).

let RegUS_1b_seta(ch_US:channel, appid:Appid, facetid:Facetid) = RegUS_seta(ch_US, appid, facetid).
let RegUS_1b_noa(ch_US:channel, appid:Appid, facetid:Facetid) = RegUS_noa(ch_US, appid, facetid).
let RegUS_2b_seta(ch_US:channel, appid:Appid, facetid:Facetid) = RegUS_seta(ch_US, appid, facetid).
let RegUS_2b_noa(ch_US:channel, appid:Appid, facetid:Facetid) = RegUS_noa(ch_US, appid, facetid).
let RegUS_1r_seta(ch_US:channel, appid:Appid, facetid:Facetid) = RegUS_seta(ch_US, appid, facetid).
let RegUS_1r_noa(ch_US:channel, appid:Appid, facetid:Facetid) = RegUS_noa(ch_US, appid, facetid).
let RegUS_2r_seta(ch_US:channel, appid:Appid, facetid:Facetid) = RegUS_seta(ch_US, appid, facetid).
let RegUS_2r_noa(ch_US:channel, appid:Appid, facetid:Facetid) = RegUS_noa(ch_US, appid, facetid).

(********************************************************************)
(*                                            Relying Party                                                 *)
(********************************************************************)
let RegRP_seta(ch_RP:channel, uname:Uname, password:bitstring) =
(
	in(ch_RP,up:msg_UR);
	let InputUandP(=uname, =password) = up in
    in(ch_RP,tlsdata:TLSData);
    out(ch_RP,RegRSbegin(uname, tlsdata));
    in(ch_RP,RegSRreq(uname,appid,sdata,chlg));
    out(ch_RP,RegRUreq(uname,appid,sdata,chlg));
    in(ch_RP,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_RP, RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegRP_noa(ch_RP:channel, uname:Uname, password:bitstring) =
(
	in(ch_RP,up:msg_UR);
	let InputUandP(=uname, =password) = up in
    in(ch_RP,tlsdata:TLSData);
    out(ch_RP,RegRSbegin(uname, tlsdata));
    in(ch_RP,RegSRreq_null(uname,sdata,chlg));
    out(ch_RP,RegRUreq_null(uname,sdata,chlg));
    in(ch_RP,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_RP, RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegRP_1b_seta(ch_RP:channel, uname:Uname, password:bitstring) = RegRP_seta(ch_RP, uname, password).
let RegRP_1b_noa(ch_RP:channel, uname:Uname, password:bitstring) = RegRP_noa(ch_RP, uname, password).
let RegRP_2b_seta(ch_RP:channel, uname:Uname, password:bitstring) = RegRP_seta(ch_RP, uname, password).
let RegRP_2b_noa(ch_RP:channel, uname:Uname, password:bitstring) = RegRP_noa(ch_RP, uname, password).
let RegRP_1r_seta(ch_RP:channel, uname:Uname, password:bitstring) = RegRP_seta(ch_RP, uname, password).
let RegRP_1r_noa(ch_RP:channel, uname:Uname, password:bitstring) = RegRP_noa(ch_RP, uname, password).
let RegRP_2r_seta(ch_RP:channel, uname:Uname, password:bitstring) = RegRP_seta(ch_RP, uname, password).
let RegRP_2r_noa(ch_RP:channel, uname:Uname, password:bitstring) = RegRP_noa(ch_RP, uname, password).

(********************************************************************)
(*                                             User Agent                                                   *)
(* 1.  only represent a honest user agent                     					                *)
(* 2. it can visit a fake website                                                                       *)
(********************************************************************)
let RegUA_seta(ch_UA:channel,uname:Uname,password:bitstring) =
(
	event UA_init_reg(uname);
	out(ch_UA,InputUandP(uname,password));
	in(ch_UA, RegRUreq(xuname,appid,sdata,chlg));
    in(ch_UA,tlsdata:TLSData);
    out(ch_UA, RegUCreq(xuname,appid,sdata,chlg,tlsdata));
    in(ch_UA, RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_UA,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegUA_noa(ch_UA:channel,uname:Uname,password:bitstring) =
(
	event UA_init_reg(uname);
	out(ch_UA,InputUandP(uname,password));
	in(ch_UA, RegRUreq_null(xuname,sdata,chlg));
    in(ch_UA,tlsdata:TLSData);
    out(ch_UA,RegUCreq_null(xuname,sdata,chlg,tlsdata));
    in(ch_UA, RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_UA,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).


let RegUA_1b_seta(ch_UA:channel,uname:Uname,password:bitstring) = RegUA_seta(ch_UA,uname,password).
let RegUA_1b_noa(ch_UA:channel,uname:Uname,password:bitstring) = RegUA_noa(ch_UA,uname,password).
let RegUA_2b_seta(ch_UA:channel,uname:Uname,password:bitstring) = RegUA_seta(ch_UA,uname,password).
let RegUA_2b_noa(ch_UA:channel,uname:Uname,password:bitstring) = RegUA_noa(ch_UA,uname,password).
let RegUA_1r_seta(ch_UA:channel,uname:Uname,password:bitstring) = RegUA_seta(ch_UA,uname,password).
let RegUA_1r_noa(ch_UA:channel,uname:Uname,password:bitstring) = RegUA_noa(ch_UA,uname,password).
let RegUA_2r_seta(ch_UA:channel,uname:Uname,password:bitstring) = RegUA_seta(ch_UA,uname,password).
let RegUA_2r_noa(ch_UA:channel,uname:Uname,password:bitstring) = RegUA_noa(ch_UA,uname,password).

(********************************************************************)
(*                                             FIDO Client                                                  *)
(* 1. FIDO UAF client                   				                                                    *)
(********************************************************************)
let RegUC_seta(ch_UC:channel,facetid:Facetid) =
(
	in(ch_UC,RegUCreq(uname,appid,sdata,chlg,tlsdata));
    get AppList(=appid, =facetid) in
    let fcp = FCParams(appid,facetid,chlg,tlsdata) in
    out(ch_UC,RegCMreq(uname,appid,fcp));
    in(ch_UC,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s));
    out(ch_UC,RegCUresp(sdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegUC_noa(ch_UC:channel,facetid:Facetid) =
(
	in(ch_UC,RegUCreq_null(uname,sdata,chlg,tlsdata));
    let appid = facetid_to_appid(facetid) in
    let fcp = FCParams(appid,facetid,chlg,tlsdata) in
    out(ch_UC,RegCMreq(uname,appid,fcp));
    in(ch_UC,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s));
    out(ch_UC,RegCUresp(sdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
).

let RegUC_1b_seta(ch_UC:channel,facetid:Facetid) = RegUC_seta(ch_UC,facetid).
let RegUC_1b_noa(ch_UC:channel,facetid:Facetid) = RegUC_noa(ch_UC,facetid).
let RegUC_2b_seta(ch_UC:channel,facetid:Facetid) = RegUC_seta(ch_UC,facetid).
let RegUC_2b_noa(ch_UC:channel,facetid:Facetid) = RegUC_noa(ch_UC,facetid).
let RegUC_1r_seta(ch_UC:channel,facetid:Facetid) = RegUC_seta(ch_UC,facetid).
let RegUC_1r_noa(ch_UC:channel,facetid:Facetid) = RegUC_noa(ch_UC,facetid).
let RegUC_2r_seta(ch_UC:channel,facetid:Facetid) = RegUC_seta(ch_UC,facetid).
let RegUC_2r_noa(ch_UC:channel,facetid:Facetid) = RegUC_noa(ch_UC,facetid).


(********************************************************************)
(*                                                  ASM                                                        *)
(********************************************************************)
let RegASM_1b2b(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) =
(
	in(ch_ASM, RegCMreq(uname,appid,fcp));
	let fc = ToFc(hash(fcp)) in
    (* bound authenticator send keyhandle and store it into the ASM *)
    let ak = To_12b_token(appid,token,callerid,personaid) in
    let testak = ak in
    out(ch_ASM,RegMAreq(uname,appid,ak,fc));
    in(ch_ASM,RegAMresp_12b(aaid,fc2,kid,cntr,pkAT,pkAU,kh,s));
    out(ch_ASM,RegMCresp(aaid,fc2,kid,cntr,pkAT,pkAU,s))
).

let RegASM_1r2r(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) =
(
	in(ch_ASM, RegCMreq(uname,appid,fcp));
	let fc = ToFc(hash(fcp)) in
    let ak = To_12r_token(appid) in
    let testak = ak in
    (* roaming authenticators don't send the keyhandle *)
    out(ch_ASM,RegMAreq(uname,appid,ak,fc));
    in(ch_ASM,RegAMresp_12r(aaid,fc2,kid,cntr,pkAT,pkAU,s));
    out(ch_ASM,RegMCresp(aaid,fc2,kid,cntr,pkAT,pkAU,s))
).

let RegASM_1b_seta(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1b2b(ch_ASM, token, callerid, personaid).
let RegASM_1b_noa(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1b2b(ch_ASM, token, callerid, personaid).
let RegASM_2b_seta(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1b2b(ch_ASM, token, callerid, personaid).
let RegASM_2b_noa(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1b2b(ch_ASM, token, callerid, personaid).
let RegASM_1r_seta(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1r2r(ch_ASM, token, callerid, personaid).
let RegASM_1r_noa(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1r2r(ch_ASM, token, callerid, personaid).
let RegASM_2r_seta(ch_ASM:channel, token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1r2r(ch_ASM, token, callerid, personaid).
let RegASM_2r_noa(ch_ASM:channel,  token:bitstring, callerid:Callerid, personaid:PersonaID) = RegASM_1r2r(ch_ASM, token, callerid, personaid).


(********************************************************************)
(*                                             Authenticator                                               *)
(* 1. RegServer to registration                                                                      *)
(* 2. AuthServer to authentication                                                                *)
(* Both of them use the same channel                                                           *)
(********************************************************************)
let RegAutr_1b(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =
(
	in(ch_autr,RegMAreq(uname,appid,ak,fc));
	new skAU_seed:bitstring;
    let skAU = gen_skAU(skAU_basic,skAU_seed) in
	new cntr_seed:bitstring;
    let cntr = gen_cntr(cntr_basic,cntr_seed) in
	let pkAT = spk(skAT) in
	let pkAU = spk(skAU) in
    new kid_seed:bitstring;
    let kid = gen_kid(kid_basic, kid_seed) in
    let kh = senc((skAU,ak,uname,kid),wrapkey) in 
    let s = sign((aaid,fc,kid,cntr,pkAU),skAT) in
    event Autr_verify_reg(uname,appid,aaid,kid);
    out(ch_autr,RegAMresp_12b(aaid,fc,kid,cntr,pkAT,pkAU,kh,s))
).

let RegAutr_2b(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =
(
	in(ch_autr,RegMAreq(uname,appid,ak,fc) );
	new skAU_seed:bitstring;
    let skAU = gen_skAU(skAU_basic,skAU_seed) in
	new cntr_seed:bitstring;
    let cntr = gen_cntr(cntr_basic,cntr_seed) in
	let pkAT = spk(skAT) in
	let pkAU = spk(skAU) in
    new kid_seed:bitstring;
    let kid = gen_kid(kid_basic, kid_seed) in
    let kh = senc((skAU,ak,kid),wrapkey) in
    let s = sign((aaid,fc,kid,cntr,pkAU),skAT) in
    event Autr_verify_reg(uname,appid,aaid,kid);
    out(ch_autr,RegAMresp_12b(aaid,fc,kid,cntr,pkAT,pkAU,kh,s))
).

let RegAutr_1r(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =
(
	in(ch_autr,RegMAreq(uname,appid,ak,fc));
	new skAU_seed:bitstring;
    let skAU = gen_skAU(skAU_basic,skAU_seed) in
	new cntr_seed:bitstring;
    let cntr = gen_cntr(cntr_basic,cntr_seed) in
	let pkAT = spk(skAT) in
	let pkAU = spk(skAU) in
     new kid_seed:bitstring;
    let kid = gen_kid(kid_basic, kid_seed) in
    let kh = senc((skAU,ak,uname,kid),wrapkey) in 
    let s = sign((aaid,fc,kid,cntr,pkAU),skAT) in
    event Autr_verify_reg(uname,appid,aaid,kid);
    out(ch_autr,RegAMresp_12r(aaid,fc,kid,cntr,pkAT,pkAU,s))
).

let RegAutr_2r(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =
(
	in(ch_autr,RegMAreq(uname,appid,ak,fc));
	new skAU_seed:bitstring;
    let skAU = gen_skAU(skAU_basic,skAU_seed) in
	new cntr_seed:bitstring;
    let cntr = gen_cntr(cntr_basic,cntr_seed) in
	let pkAT = spk(skAT) in
	let pkAU = spk(skAU) in
    let kh = senc((skAU,ak),wrapkey) in
    let kid = kh in
    let s = sign((aaid,fc,kid,cntr,pkAU),skAT) in
    event Autr_verify_reg(uname,appid,aaid,kid);
    out(ch_autr,RegAMresp_12r(aaid,fc,kid,cntr,pkAT,pkAU,s))
).

let RegAutr_1b_seta(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_1b(ch_autr,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_1b_noa(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_1b(ch_autr,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_2b_seta(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_2b(ch_autr,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_2b_noa(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_2b(ch_autr,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_1r_seta(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_1r(ch_autr,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_1r_noa(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_1r(ch_autr,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_2r_seta(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_2r(ch_autr,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).
let RegAutr_2r_noa(ch_autr:channel,aaid:AAID,skAT:sskey,wrapkey:key,skAU_basic:sskey,cntr_basic:CNTR,kid_basic:KeyID) =  RegAutr_2r(ch_autr,aaid,skAT,wrapkey,skAU_basic,cntr_basic,kid_basic).

(********************************************************************)
(*                                       Registration system                                               *)
(********************************************************************)
let Reg_system(ch_autr:channel,ch_ASM:channel,ch_UC:channel,ch_UA:channel,ch_RP:channel,ch_US:channel) =
(
(
    in(ch_RP, RegRSbegin(uname, tlsdata));
    out(ch_US, RegRSbegin(uname, tlsdata));
    in(ch_US,RegSRreq(uname,appid,sdata,chlg));
    out(ch_RP,RegSRreq(uname,appid,sdata,chlg));
    in(ch_RP,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_US,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
)|
(
    event malicious_US_to_RP();
    in(ch_RP, RegRSbegin(uname, tlsdata));
    out(c, RegRSbegin(uname, tlsdata));
    in(c,RegSRreq(uname,appid,sdata,chlg));
    out(ch_RP,RegSRreq(uname,appid,sdata,chlg));
    in(ch_RP,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(c,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
)|
(
    event malicious_RP_to_US();
    in(c, RegRSbegin(uname, tlsdata));
    out(ch_US, RegRSbegin(uname, tlsdata));
    in(ch_US,RegSRreq(uname,appid,sdata,chlg));
    out(c,RegSRreq(uname,appid,sdata,chlg));
    in(c,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_US,RegRSresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
)|
(
    in(ch_UA, InputUandP(uname, password));
    out(ch_RP,InputUandP(uname, password));
    out(ch_RP,GetTLSdata(ch_UA,ch_RP));
    in(ch_RP,RegRUreq(uname,appid,sdata,chlg));
    out(ch_UA,RegRUreq(uname,appid,sdata,chlg));
    out(ch_UA,GetTLSdata(ch_UA,ch_RP));
    in(ch_UA,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_RP,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
    
)|
(
    event malicious_UA_to_RP();
    in(c, InputUandP(uname, password));
    out(ch_RP,InputUandP(uname, password));
    out(ch_RP,GetTLSdata(c,ch_RP));
    in(ch_RP,RegRUreq(uname,appid,sdata,chlg));
    out(c,RegRUreq(uname,appid,sdata,chlg));
    out(c,GetTLSdata(c,ch_RP));
    in(c,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_RP,RegURresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
)|
(
    in(ch_UA, RegUCreq(xuname,appid,sdata,chlg,tlsdata));
    out(ch_UC,RegUCreq(xuname,appid,sdata,chlg,tlsdata));
    in(ch_UC,RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_UA,RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
)|
(
    event malicious_UA_to_UC();
    in(c, RegUCreq(xuname,appid,sdata,chlg,tlsdata));
    out(ch_UC,RegUCreq(xuname,appid,sdata,chlg,tlsdata));
    in(ch_UC,RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(c,RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
)|
(
    event malicious_UC_to_UA();
    in(ch_UA, RegUCreq(xuname,appid,sdata,chlg,tlsdata));
    out(c,RegUCreq(xuname,appid,sdata,chlg,tlsdata));
    in(c,RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s));
    out(ch_UA,RegCUresp(xsdata,aaid,fc,kid,cntr,pkAT,pkAU,fcp,s))
)|
(
    in(ch_UC, RegCMreq(uname,appid,fcp));
    out(ch_ASM,RegCMreq(uname,appid,fcp));
    in(ch_ASM,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s));
    out(ch_UC,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s))
)|
(
    event malicious_UC_to_ASM();
    in(c, RegCMreq(uname,appid,fcp));
    out(ch_ASM,RegCMreq(uname,appid,fcp));
    in(ch_ASM,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s));
    out(c,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s))
)|
(
    event malicious_ASM_to_UC();
    in(ch_UC, RegCMreq(uname,appid,fcp));
    out(c,RegCMreq(uname,appid,fcp));
    in(c,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s));
    out(ch_UC,RegMCresp(aaid,fc,kid,cntr,pkAT,pkAU,s))
)|
(
    in(ch_ASM, RegMAreq(uname,appid,ak,fc));
    out(ch_autr,RegMAreq(uname,appid,ak,fc));
    in(ch_autr,RegAMresp_12b(aaid,fc2,kid,cntr,pkAT,pkAU,kh,s));
    out(ch_ASM,RegAMresp_12b(aaid,fc2,kid,cntr,pkAT,pkAU,kh,s))
)|
(
    event malicious_ASM_to_Autr();
    in(c, RegMAreq(uname,appid,ak,fc));
    out(ch_autr,RegMAreq(uname,appid,ak,fc));
    in(ch_autr,RegAMresp_12b(aaid,fc2,kid,cntr,pkAT,pkAU,kh,s));
    out(c,RegAMresp_12b(aaid,fc2,kid,cntr,pkAT,pkAU,kh,s))
)|
(
    event malicious_Autr_to_ASM();
    in(ch_ASM, RegMAreq(uname,appid,ak,fc));
    out(c,RegMAreq(uname,appid,ak,fc));
    in(c,RegAMresp_12b(aaid,fc2,kid,cntr,pkAT,pkAU,kh,s));
    out(ch_ASM,RegAMresp_12b(aaid,fc2,kid,cntr,pkAT,pkAU,kh,s))
)
).

